## habilitar routing host
echo "net.ipv4.ip_forward=1" | sudo tee /etc/sysctl.d/99-forward.conf
sudo sysctl --system

## Crear red docker dedicada 10.9.0.0 - conexion interna de servicios docker (ip estatica por servicio)
docker network create --driver bridge --subnet 10.9.0.0/24 iamantis_net

## crea rutas de openvpn hacia docker, editar server.conf de openvpn
## Edita /etc/openvpn/server/server.conf y añade:
# (tu config existente)
port 2394
proto udp
dev tun
topology subnet
server 10.8.0.0 255.255.255.0
# NUEVO: ruta para clientes VPN hacia Docker
push "route 10.9.0.0 255.255.255.0"
## reinicia openvpn
sudo systemctl restart openvpn-server@server || sudo systemctl restart openvpn

## cortafuegos y restricciones para que solo con VPN se alcancen los contenedores
# Permite tráfico desde la VPN (10.8.0.0/24) hacia contenedores (10.9.0.0/24)
sudo iptables -I DOCKER-USER -s 10.8.0.0/24 -d 10.9.0.0/24 -j ACCEPT
# Bloquea cualquier otro origen hacia la red de contenedores
sudo iptables -I DOCKER-USER -d 10.9.0.0/24 -j DROP
# Asegura retorno de conexiones establecidas
sudo iptables -I DOCKER-USER -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
## Usar DOCKER-USER es la práctica aconsejada para políticas adicionales.(Opcional: instala iptables-persistent para guardar reglas.)

## estructura de persistencia en disco y jerarquia de archivos
sudo mkdir -p /home/madrid/iamantis/{defectdojo/{mysql,redis,media},dependencytrack/data,sonarqube/{postgres,data,logs},zap/reports,jmeter/{tests,results},trivy/cache,gitleaks/{repos,reports},web,web/certbot,nginx/conf.d,certbot/{etc,lib}}
# Deja al usuario 'madrid' como dueño de todo
sudo chown -R madrid:madrid /home/madrid/iamantis
# Endurece permisos del directorio de certificados
sudo chmod 750 /home/madrid/iamantis/certbot/etc
# (cuando existan claves privadas, asegúrate de 600)
sudo find /home/madrid/iamantis/certbot/etc -type f -name "privkey.pem" -exec sudo chmod 600 {} \;
# (Opcional) crea un index mínimo para evitar 403/404 iniciales
sudo bash -c 'echo "<h1>Iamantis</h1>" > /home/madrid/iamantis/web/index.html'
sudo chown madrid:madrid /home/madrid/iamantis/web/index.html
## Docker recomienda bind mounts/volúmenes para persistencia; las cuotas no son nativas por volumen, de ahí el loopback opcional.

## configuración de docker-compose.yml
networks:
  iamantis_net:
    external: true

services:

  # ===================== DefectDojo =====================
  mysql_ddj:
    image: mysql:8.0
    container_name: mysql_ddj
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: change_this_root_pwd
      MYSQL_DATABASE: dojo
      MYSQL_USER: dojo
      MYSQL_PASSWORD: change_this_pwd
    volumes:
      - /home/madrid/iamantis/defectdojo/mysql:/var/lib/mysql
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.10
    mem_limit: 1g

  redis_ddj:
    image: redis:7-alpine
    container_name: redis_ddj
    restart: always
    volumes:
      - /home/madrid/iamantis/defectdojo/redis:/data
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.11
    mem_limit: 512m

  defectdojo:
    image: defectdojo/defectdojo-django:latest
    container_name: defectdojo
    restart: always
    depends_on:
      - mysql_ddj
      - redis_ddj
    environment:
      DD_DATABASE_HOST: mysql_ddj
      DD_DATABASE_PORT: "3306"
      DD_DATABASE_NAME: dojo
      DD_DATABASE_USER: dojo
      DD_DATABASE_PASSWORD: change_this_pwd
      DD_DEBUG: "False"
    volumes:
      - /home/madrid/iamantis/defectdojo/media:/app/media
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.12
    mem_limit: 3g
    # Acceso por VPN: http://10.9.0.12:8080

  # ===================== Dependency-Track =====================
  dependencytrack:
    image: dependencytrack/bundled:latest
    container_name: dependencytrack
    restart: always
    environment:
      TZ: "UTC"
    volumes:
      - /home/madrid/iamantis/dependencytrack/data:/data
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.20
    mem_limit: 3g
    # Acceso por VPN: http://10.9.0.20:8080

  # ===================== SonarQube CE + Postgres =====================
  postgres_sonar:
    image: postgres:15
    container_name: postgres_sonar
    restart: always
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonarpass
      POSTGRES_DB: sonar
    volumes:
      - /home/madrid/iamantis/sonarqube/postgres:/var/lib/postgresql/data
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.31
    mem_limit: 1.5g

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    restart: always
    depends_on:
      - postgres_sonar
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres_sonar:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonarpass
    volumes:
      - /home/madrid/iamantis/sonarqube/data:/opt/sonarqube/data
      - /home/madrid/iamantis/sonarqube/logs:/opt/sonarqube/logs
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.30
    mem_limit: 3g
    # Acceso por VPN: http://10.9.0.30:9000

  # ===================== OWASP ZAP (daemon/API) =====================
  zap:
    image: zaproxy/zap-stable
    container_name: zap
    restart: always
    command: >
      bash -lc "zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.disablekey=true"
    volumes:
      - /home/madrid/iamantis/zap/reports:/zap/reports
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.40
    mem_limit: 3g
    # Acceso por VPN (API): http://10.9.0.40:8080

  # ===================== JMeter (runner) =====================
  jmeter:
    image: alpine/jmeter:5.6.3
    container_name: jmeter
    working_dir: /tests
    volumes:
      - /home/madrid/iamantis/jmeter/tests:/tests
      - /home/madrid/iamantis/jmeter/results:/results
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.50
    mem_limit: 2g
    # Ejecuta planes bajo demanda:
    # docker compose run --rm jmeter -n -t /tests/plan.jmx -l /results/out.jtl

  # ===================== Trivy server =====================
  trivy:
    image: aquasec/trivy:latest
    container_name: trivy
    command: server --listen 0.0.0.0:4954
    restart: always
    volumes:
      - /home/madrid/iamantis/trivy/cache:/root/.cache
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.60
    mem_limit: 3g
    # Acceso por VPN: http://10.9.0.60:4954

  # ===================== Gitleaks (secret scanning) =====================
  gitleaks:
    image: zricethezav/gitleaks:latest
    container_name: gitleaks
    tty: true
    stdin_open: true
    command: sh -c "sleep infinity"
    volumes:
      - /home/madrid/iamantis/gitleaks/repos:/repos
      - /home/madrid/iamantis/gitleaks/reports:/reports
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.70
    # (ligero; añade mem_limit si quieres)

  # ===================== NGINX (web público) =====================
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    restart: always
    # ÚNICO servicio público — expone 80/443
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /home/madrid/iamantis/web:/usr/share/nginx/html:ro
      - /home/madrid/iamantis/web/certbot:/var/www/certbot:ro
      - /home/madrid/iamantis/nginx/conf.d:/etc/nginx/conf.d:ro
      - /home/madrid/iamantis/certbot/etc:/etc/letsencrypt:ro
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.80

  # ===================== Certbot (renovación automática) =====================
  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    restart: always
    command: >
      sh -c 'while :; do
      certbot renew --webroot -w /var/www/certbot --quiet || true;
      sleep 12h;
      done'
    volumes:
      - /home/madrid/iamantis/web/certbot:/var/www/certbot
      - /home/madrid/iamantis/certbot/etc:/etc/letsencrypt
      - /home/madrid/iamantis/certbot/lib:/var/lib/letsencrypt
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.81

  # ===================== (Opcional) Reloader de Nginx cada 12h =====================
  # Envía HUP al contenedor 'nginx' para que tome nuevos certificados tras la renovación.
  # Si no lo quieres, comenta este servicio y recarga nginx manualmente cuando renueve.
  nginx_hup:
    image: alpine:3.20
    container_name: nginx_hup
    restart: always
    command: >
      sh -c "apk add --no-cache curl >/dev/null 2>&1;
      while :; do
        sleep 12h;
        curl --unix-socket /var/run/docker.sock -X POST http:/v1.41/containers/nginx/kill?signal=HUP || true;
      done"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      iamantis_net:
        ipv4_address: 10.9.0.82

## Hacer pull para lanzar los docker

cd /home/madrid/iamantis
## docker login    # opcional, ayuda con rate limits
docker compose pull --no-parallel


